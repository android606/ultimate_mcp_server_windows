[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ultimate_mcp_server"
version = "0.1.0"
description = "The Ultimate Model Context Protocol (MCP) Server, providing unified access to a wide variety of useful and powerful tools."
readme = "README.md"
requires-python = ">=3.13"
license = {file = "LICENSE"}
authors = [
    {name = "Jeffrey Emanuel", email = "jeffrey.emanuel@gmail.com"},
]
maintainers = [
    {name = "Jeffrey Emanuel", email = "jeffrey.emanuel@gmail.com"},
]
keywords = ["ultimte", "mcp", "server", "agent", "ai", "claude", "gpt", "gemini", "deepseek"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core MCP and LLM providers
    "mcp>=0",
    "anthropic>=0",
    "openai>=0",
    "google-genai>=0",
    # Async utilities
    "httpx>=0",
    "aiofiles>=0",
    # Data processing
    "pydantic>=0",
    "tenacity>=0", # For retry logic
    # Caching and persistence
    "diskcache>=0", # Persistent disk cache
    "msgpack>=0", # Efficient serialization
    # Vector database for semantic caching
    "numpy>=0",
    "sentence-transformers>=0", # For embeddings
    "chromadb>=0", # Vector DB
    # Analytics and monitoring
    "prometheus-client>=0",
    "pandas>=0",
    "rich>=0", # Console output formatting
    # Templating for prompt management
    "jinja2>=0",
    # Multi-modal support
    "pillow>=0", # Image processing
    # Utilities
    "python-slugify>=0", # For URL-friendly strings
    "colorama>=0", # Terminal colors
    "tqdm>=0", # Progress bars
    "tiktoken>=0", # Token counting
    "python-decouple>=0", # .env management
    "pydantic-settings>=0",
    "jsonschema>=0",
    "matplotlib>=0",
    "marqo>=0", # Added for Marqo search tool
    "pytest-playwright>=0", # For web browser automation
    "sqlalchemy>=0", # For SQL database interactions
    "aiosqlite>=0", # Async SQLite database access
    "pyvis>=0", # Graph visualization
    "python-docx>=0", # MS Word DOCX support
    "opencv-python>=0", # For OCR tools
    "pytesseract>=0", # For OCR
    "pdf2image>=0", # For OCR
    "PyPDF2>=0", # PDF conversion
    "pdfplumber>=0", # For OCR
    "pymupdf>=0", # For OCR
    "beautifulsoup4>=0", # Dealing with HTML
    "xmldiff>=0", # for redlines
    "lxml>=0", # XML parser
    "faster-whisper>=0", # Audio transcripts
    "html2text>=0",
    "readability-lxml>=0",
    "markdownify>=0",
    "trafilatura>=0",
    "markdown>=0",
    "jsonpatch>=0",
    "jsonpointer>=0",
    "pygments>=0",
    "typer>=0", # For CLI interface
    "docling>=0", # For document conversion
    "aiohttp>=0",
    "boto3>=0", # For AWS secrets management
    "hvac>=0", # For HashiVault pw management
    "pandera>=0", # Data validation
    "rapidfuzz>=0",
    "magika>=0",
    "tabula-py>=0",
    "brotli>=0",
    "pygments>=0",
    "fastapi>=0.115.9",
    "uvicorn>=0.34.2",
    "networkx>0",
    "scipy>0",

]

[project.optional-dependencies]
advanced = [
  "torch==2.8.0.dev20250428+cu126",
  "torchvision==0.22.0.dev20250428+cu126",
  "torchaudio==2.6.0.dev20250428+cu126",
  "pytorch-triton==3.3.0+git96316ce5",
  "transformers>=0",
  "accelerate>=0",
]

#excel_automation = [
#    "win32com", # Excel automation,
#    "win32com",
#]

# Development and testing
dev = [
    # Testing framework
    "pytest>=8.0",
    "pytest-asyncio>=0",
    "pytest-cov>=0",
    "pytest-playwright>=0",
    "pytest-mock>=0",
    
    # Code quality and formatting
    "black>=24.0",
    "isort>=5.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
    "flake8>=6.0",
    
    # Type checking
    "types-aiofiles>=0",
    "types-requests>=0", 
    "types-setuptools>=0",
    
    # Git hooks and workflow
    "pre-commit>=3.0",
    
    # Development utilities
    "ipython>=8.0",
    "ipdb>=0",
]

# Testing dependencies (subset for CI)
test = [
    "pytest>=8.0",
    "pytest-asyncio>=0",
    "pytest-cov>=0",
    "pytest-mock>=0",
]

# Windows-specific development tools
windows = [
    "pywin32>=0; sys_platform == 'win32'",
    "colorama>=0.4.6",  # Better Windows terminal support
]

# Documentation
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings>=0",
    "mkdocstrings-python>=1.0",
    "pymdown-extensions>=10.0",
]

# All extras
all = ["ultimate_mcp_server[advanced,dev,test,windows,docs]"]

[[tool.uv.index]]
name = "pypi"
url  = "https://pypi.org/simple"

[[tool.uv.index]]
name = "torch-nightly-cu126"
url  = "https://download.pytorch.org/whl/nightly/cu126"
explicit = true               # only packages you pin may come from here

[tool.uv.sources]
torch       = { index = "torch-nightly-cu126" }
torchvision = { index = "torch-nightly-cu126" }
torchaudio  = { index = "torch-nightly-cu126" }
pytorch-triton = { index = "torch-nightly-cu126" }

[tool.uv.pip]
prerelease = "allow"

[project.urls]
Homepage = "https://github.com/Dicklesworthstone/ultimate_mcp_server"
Documentation = "https://github.com/Dicklesworthstone/ultimate_mcp_server/docs"
Repository = "https://github.com/Dicklesworthstone/ultimate_mcp_server.git"
"Bug Reports" = "https://github.com/Dicklesworthstone/ultimate_mcp_server/issues"

[project.scripts]
umcp = "ultimate_mcp_server.cli.typer_cli:cli"

[tool.hatch.version]
path = "ultimate_mcp_server/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/ultimate_mcp_server",
    "/examples",
    "/tests",
    "LICENSE",
    "README.md",
    "pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["ultimate_mcp_server"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov=ultimate_mcp_server --cov-report=term-missing -v"
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "Q"]
ignore = ["E203", "E501", "Q000"]
